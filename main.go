package main
import (
  "flag"
  "os"
  "fmt"
  "strings"
  "strconv"
  "bytes"
  "github.com/parnurzeal/gorequest"
  "encoding/json"
  "appstore-hipchat-integration/models"
  "github.com/tbruyelle/hipchat-go/hipchat"
  "github.com/eknkc/amber"
)

var (
  token  = flag.String("token", "", "The HipChat AuthToken")
  roomId = flag.String("room", "", "The HipChat room id")
  test   = flag.Bool("t", false, "Enable auth_test parameter")
)

type Review struct {
  Title string
  Author string
  Stars []string
  Message string
}

func getJson() models.AutoGenerated {
  url := "https://itunes.apple.com/au/rss/customerreviews/id=1029783189/page=1/json"
  resp, body, err := gorequest.New().Get(url).End()
  fmt.Println(resp.Status)
  if err != nil {
  }
  feed := models.AutoGenerated{}
  json.Unmarshal([]byte(body), &feed)

  return feed;
}

func getReviewMessage(review Review) string {
  compiler := amber.New()
  // Parse the input file
  err := compiler.ParseFile("./review.amber")
  if (err != nil) {
    fmt.Println("Unable to find review.amber")
  }
  // Compile input file to Go template
  tpl, err := compiler.Compile()
  if (err != nil) {
    fmt.Println("Problem when compiling review.amber") 
  }
  var buf bytes.Buffer
  tpl.Execute(&buf, review)
  return strings.TrimSpace(buf.String())
}

func main() {
  flag.Parse()
  if *token == "" || *roomId == "" {
    flag.PrintDefaults()
    return
  }
  hipchat.AuthTest = *test

  feed := getJson();
  entry := feed.Feed.Entry[2]
  i, err := strconv.Atoi(entry.ImRating.Label)
  if err == nil {
    var slice = make([]string, i)
    star := "https://s.mzstatic.com/htmlResources/B69E/web-storefront/images/star@2x.png"

    for i := range slice {
      slice[i] = star
    }
    review := Review{Title: entry.Title.Label, Author: entry.Author.Name.Label, Stars: slice, Message: entry.Content.Label}
    // Check built in html/template documentation for further details
    message := getReviewMessage(review);
    notifRq := &hipchat.NotificationRequest{Message: message} 
    c := hipchat.NewClient(*token)
    resp, err := c.Room.Notification(*roomId, notifRq)
    if err != nil {
      fmt.Fprintf(os.Stderr, "Error during room notification %q\n", err)
      fmt.Fprintf(os.Stderr, "Server returns %+v\n", resp)
      return
    }

    if hipchat.AuthTest {
      _, ok := hipchat.AuthTestResponse["success"]
      fmt.Println("Authentification succeed :", ok)
    } else {
      fmt.Println("Sent App Reviews")
    } 
  }
}
