package main
import (
	"flag"
	"os"
	"fmt"
  "strings"
  "bytes"
	"github.com/parnurzeal/gorequest"
	"encoding/json"
	"appstore-hipchat-integration/models"
	"github.com/tbruyelle/hipchat-go/hipchat"
  "github.com/eknkc/amber"
)

var (
	token  = flag.String("token", "", "The HipChat AuthToken")
	roomId = flag.String("room", "", "The HipChat room id")
	test   = flag.Bool("t", false, "Enable auth_test parameter")
)
type Review struct {
  Title string
  Author string
  Stars []string
  Message string
}
func main() {
	flag.Parse()
	if *token == "" || *roomId == "" {
		flag.PrintDefaults()
		return
	}
	hipchat.AuthTest = *test
	c := hipchat.NewClient(*token)

	url := "https://itunes.apple.com/au/rss/customerreviews/id=1029783189/page=1/json"
	resp, body, httperr := gorequest.New().Get(url).End()
	if httperr == nil {
		fmt.Println(resp)
    fmt.Println("--------------------------------------------------------------------------------------------------------------")
		feed := models.AutoGenerated{}
		json.Unmarshal([]byte(body), &feed)
		//notifRq := &hipchat.NotificationRequest{Message: "<h1>" + feed.Feed.Entry[1].Title.Label + "</h1> (" + feed.Feed.Entry[1].ImReleaseDate.Label + ")</br> " + feed.Feed.Entry[1].Content.Label}
		//notifRq := &hipchat.NotificationRequest{Message: "<table border=\"0\" width=\"100%\"> <tr> <td> <table border=\"0\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"> <tr valign=\"top\" align=\"left\"> <td width=\"100%\"> <b><a href=\"https://itunes.apple.com/au/app/william-hill-home-betting/id1029783189?mt=8&uo=2\">Betslip needs upgrade</a></b><br/> <font size=\"2\" face=\"Helvetica,Arial,Geneva,Swiss,SunSans-Regular\"> </font> </td> </tr> </table> </td> </tr> <tr> <td> <font size=\"2\" face=\"Helvetica,Arial,Geneva,Swiss,SunSans-Regular\"><br/>I have to get onto the website to put the type of bets I like on. No lucky 63&#39;s etc types available through the app.</font><br/> </td> </tr> </table>"}
		//notifRq := &hipchat.NotificationRequest{Message: "<img width=\"11px\" height=\"11px\"src=\"https://s.mzstatic.com/htmlResources/B69E/web-storefront/images/star@2x.png\"></img>"}
		//notifRq := &hipchat.NotificationRequest{Message: ""}

    compiler := amber.New()
		// Parse the input file
		err := compiler.ParseFile("./review.amber")
		if err == nil {
			// Compile input file to Go template
			tpl, err := compiler.Compile()
			if err == nil {
        var buf bytes.Buffer
        star := "https://s.mzstatic.com/htmlResources/B69E/web-storefront/images/star@2x.png"
        review := Review{Title: "Best App", Author: "Tyson Wolker", Stars: []string{star, star, star, star}, Message: "Best app I've ever seen in my entire life."}
				// Check built in html/template documentation for further details
				tpl.Execute(&buf, review)
				notifRq := &hipchat.NotificationRequest{Message: strings.TrimSpace(buf.String())}
				resp, err := c.Room.Notification(*roomId, notifRq)
				if err != nil {
					fmt.Fprintf(os.Stderr, "Error during room notification %q\n", err)
					fmt.Fprintf(os.Stderr, "Server returns %+v\n", resp)
          return
				}

				if hipchat.AuthTest {
					_, ok := hipchat.AuthTestResponse["success"]
					fmt.Println("Authentification succeed :", ok)
				} else {
					fmt.Println("Sent App Reviews")
				}

			}
		}
	}
}
